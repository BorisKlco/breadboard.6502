MEMORY {
	ZP:		start = $0000, size = $0100, type = rw;
	INPUT_BUFFER: start = $1200, size = $0100, type = rw, file="";
	BASROM:		start = $8000, size = $6000, fill = yes, file = %O;
	LCD_WRITE: start=$E000, size= $200, fill=yes, file = %O;
	LCD_START: start= $E200, size= $200, fill=yes, file = %O;
	VOID: start= $E400, size= $1A00, fill=yes, file = %O;
	WOZMON: start = $FE00, size = $1FA, fill=yes, file =%O;
	RRVEC: start = $FFFA, size = 6, fill= yes, file =%O;
	DUMMY:		start = $0000, size = $00FF, file = "";
}

SEGMENTS {
	ZEROPAGE:	load = ZP, type = zp;
	INPUT_BUFFER: load = INPUT_BUFFER, type = rw;
	HEADER:		load = BASROM,	type = ro;
	VECTORS:	load = BASROM,	type = ro;
	KEYWORDS:	load = BASROM,	type = ro;
	ERROR:		load = BASROM,	type = ro;
	CODE:		load = BASROM,	type = ro;
	CHRGET:		load = BASROM,	type = ro;
	INIT:		load = BASROM,	type = ro;
	EXTRA:		load = BASROM,	type = ro;
	DUMMY:		load = DUMMY; # don't include
	BIOS: load = BASROM, type = ro;
	LCD_START: load = LCD_START, type = ro;
	LCD_WRITE: load = LCD_WRITE, type=ro;
	WOZMON: load = WOZMON, type = ro;
	RRVEC: load = RRVEC, type = ro;
}

